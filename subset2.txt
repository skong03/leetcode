public class Solution {  
    public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {  
       ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();  
       ArrayList<Integer> tmp = new ArrayList<Integer>();  
       Arrays.sort(num);  
       res.add(tmp);  
       dfs(res,tmp,num,0);  
       return res;  
    }  
      
    public void dfs(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> tmp, int[] num, int pos){  
        for(int i=pos;i<=num.length-1;i++){  
            tmp.add(num[i]);  
            res.add(new ArrayList<Integer>(tmp));  
            dfs(res,tmp,num,i+1);  
            tmp.remove(tmp.size()-1);  
            while(i<num.length-1 && num[i]==num[i+1]) i++;   //唯一的区别就在这一行  
        }  
    }  
}  


public class Solution {
    public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Arrays.sort(num);
        
        ArrayList<ArrayList<Integer>> result=new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> temp=new ArrayList<Integer>();
        
        result.add(temp);
        dfs(result,temp, 0, num);
        return result;
    }
    
    public void dfs(ArrayList<ArrayList<Integer>> result,ArrayList<Integer> temp, int pos,int[] num)
    {
        
        for(int i=pos; i< num.length; i++)
        {
            temp.add(num[i]);
            result.add(new ArrayList<Integer>(temp));
            
            dfs(result, temp, pos+1, num);
            
            temp.remove(temp.size()-1);
            while(i<num.length-1&&num[i]==num[i+1])
            {i++;}
        }
        
        
    }
}