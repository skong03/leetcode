/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        if(l1==null && l2==null)
        {return null;}
        if(l1==null)
        {return l2;}
        if(l2==null)
        {return l1;}
        
        ListNode mynode=null;
        ListNode result=null;
        
        boolean first=true;
        
        while(l1!=null && l2!=null)
        {
            if(l1.val<=l2.val)
            {
                if(first)
                {
                    first=false;
                    mynode=new ListNode(l1.val);
                    result=mynode;
                }else{
                    mynode.next=new ListNode(l1.val);
                    mynode=mynode.next;
                }
                l1=l1.next;
            }else
            {
                if(first)
                {
                    first=false;
                    mynode=new ListNode(l2.val);
                    result=mynode;
                }
                else{
                    mynode.next=new ListNode(l2.val);
                    mynode=mynode.next;
                }
                l2=l2.next;
            }
        }
        
        if(l1==null)
        {
            mynode.next=l2;
        }else
        if(l2==null)
        {
            mynode.next=l1;
        }
        
        return result;
    }
}